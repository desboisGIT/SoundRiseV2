"""
Django settings for backend project.
Generated by 'django-admin startproject' using Django 4.2.11.
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta
from corsheaders.defaults import default_headers

# ---------------------------------------------------------
# Chemins de base et chargement des variables d'environnement
# ---------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent
ENV_PATH = BASE_DIR.parent / ".env"
load_dotenv(ENV_PATH)  # Charge le fichier .env

# ---------------------------------------------------------
# Sécurité et configuration générale
# ---------------------------------------------------------
SECRET_KEY = os.getenv("SECRET_KEY")
DEBUG = os.getenv("DEBUG") == "True"
ALLOWED_HOSTS = ['127.0.0.1', 'api.example.local']

# ---------------------------------------------------------
# Configuration des sites et comptes utilisateurs
# ---------------------------------------------------------
SITE_ID = 2
ACCOUNT_FORMS = {
    'signup': 'authentication.forms.SocialSignupForm',      # Inscriptions classiques
    'socialsignup': 'authentication.forms.SocialSignupForm',  # Inscriptions via Google, etc.
}
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_SIGNUP_REDIRECT_URL = "/api/auth/google/callback/"
ACCOUNT_LOGIN_REDIRECT_URL = "/api/auth/google/callback/"

# ---------------------------------------------------------
# Configuration CORS et CSRF
# ---------------------------------------------------------
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5173",  # Frontend Vite
]
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    "x-csrftoken",      # Pour la gestion du CSRF
    "content-type",
    "authorization",
    "sec-websocket-origin",  # Pour WebSocket
]
CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]

CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1:5173",
    "http://127.0.0.1:8000",
]

# ---------------------------------------------------------
# Applications installées
# ---------------------------------------------------------
INSTALLED_APPS = [
    # Apps Django par défaut
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "daphne",
    'django.contrib.staticfiles',

    # Applications tierces
    'rest_framework',
    'rest_framework_simplejwt',
    'axes',
    'oauth2_provider',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'social_django',
    'rest_framework.authtoken',
    'corsheaders',
    'rest_framework_simplejwt.token_blacklist',
    'django_filters',
    'django_extensions',
    "channels",
    "multiselectfield",
    "stripe",
   
    

    # Apps custom
    'core',
    'authentication',
    'beats',
    "messaging",
    "websockets",
    'transaction',
]

# ---------------------------------------------------------
# Middlewares
# ---------------------------------------------------------
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "axes.middleware.AxesMiddleware",
    'allauth.account.middleware.AccountMiddleware',
]

# ---------------------------------------------------------
# URL et applications ASGI/WGSI
# ---------------------------------------------------------
ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Répertoires des templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"
ASGI_APPLICATION = "backend.asgi.application"

# ---------------------------------------------------------
# Configuration de Channels pour WebSocket
# ---------------------------------------------------------
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],  # Adresse de Redis
        },
    },
}

# ---------------------------------------------------------
# Base de données
# ---------------------------------------------------------
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}

# ---------------------------------------------------------
# Modèle utilisateur personnalisé
# ---------------------------------------------------------
AUTH_USER_MODEL = "core.CustomUser"

# ---------------------------------------------------------
# Backends d'authentification
# ---------------------------------------------------------
AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesStandaloneBackend',
    'django.contrib.auth.backends.ModelBackend',
    'oauth2_provider.backends.OAuth2Backend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# ---------------------------------------------------------
# Configuration OAuth2 et JWT
# ---------------------------------------------------------
OAUTH2_PROVIDER = {
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600,      # Expire après 1 heure
    'AUTHORIZATION_CODE_EXPIRE_SECONDS': 600,   # Expire après 10 minutes
    'ROTATE_REFRESH_TOKENS': True,
}

REST_USE_JWT = True  # Utiliser JWT pour OAuth2

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": os.getenv("JWT_SECRET_KEY", "your-secret-key"),
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "COOKIE_NAME": "access_token",   # Nom du cookie
    "COOKIE_HTTPONLY": True,         # Empêche l’accès en JS
    "COOKIE_SECURE": False,
    "TOKEN_BLACKLIST_ENABLED": True,
    "TOKEN_BLACKLIST": True,
}

# ---------------------------------------------------------
# Configuration du REST Framework
# ---------------------------------------------------------
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "100/minute",  # 100 requêtes/min pour anonymes
        "user": "500/minute",  # 500 requêtes/min pour utilisateurs authentifiés
    },
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
        'rest_framework.filters.SearchFilter',
    ],
}

# ---------------------------------------------------------
# Validation des mots de passe et hasheurs
# ---------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

# ---------------------------------------------------------
# Configuration d'Axes (limitation des tentatives de connexion)
# ---------------------------------------------------------
AXES_FAILURE_LIMIT = 1000  # Bloque après 1000 échecs (à ajuster)
AXES_COOLOFF_TIME = 0.0001  # Temps de pause après échecs (à ajuster)

# ---------------------------------------------------------
# Sessions et sécurité
# ---------------------------------------------------------
#SESSION_COOKIE_DOMAIN = "" (prod-check)
SESSION_COOKIE_SECURE = False  # Pas de HTTPS en dev
CSRF_COOKIE_SECURE = False
SESSION_COOKIE_SAMESITE = 'None' # (prod-check)
X_FRAME_OPTIONS = "DENY"  # Empêche l’inclusion dans un iframe
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_SAVE_EVERY_REQUEST = True

# ---------------------------------------------------------
# Configuration de l'authentification sociale
# ---------------------------------------------------------
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": os.getenv("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY"),
            "secret": os.getenv("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET"),
            "key": "",
        },
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {"access_type": "online"},
    }
}
SOCIALACCOUNT_ADAPTER = "authentication.adapters.MySocialAccountAdapter"
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_LOGIN_ON_SIGNUP = True

# Clés pour l'authentification Google
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

# ---------------------------------------------------------
# Internationalisation
# ---------------------------------------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# ---------------------------------------------------------
# Fichiers statiques et médias
# ---------------------------------------------------------
STATIC_URL = 'static/'
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# ---------------------------------------------------------
# Clé primaire par défaut
# ---------------------------------------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ---------------------------------------------------------
# Configuration des emails
# ---------------------------------------------------------
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
# Pour la production, configurer :
# EMAIL_HOST = "smtp.gmail.com"
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = "tonemail@gmail.com"
# EMAIL_HOST_PASSWORD = "ton_mot_de_passe"

# ---------------------------------------------------------
# Configuration de Celery
# ---------------------------------------------------------
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'


STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET')
STRIPE_CONNECT_CLIENT_ID = os.getenv('STRIPE_CONNECT_CLIENT_ID')


STRIPE_REFRESH_URL="https://soundrise.com/retry-onboarding"
STRIPE_RETURN_URL="https://soundrise.com/dashboard"

SOUNDRISE_TAX=0.03